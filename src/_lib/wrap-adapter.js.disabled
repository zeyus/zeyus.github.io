import { format } from 'util';

function isFunction(func) {
    return func instanceof Function;
}

const truthy = Boolean;

function truthyEntries(object) {
    return Object.entries(object).filter(([, v]) => truthy(v));
}

/**
 * Trim the size of the margin on the first line from every line.
 */
function trimMargin(text) {
    if (text.startsWith('\n')) {
        text = text.slice(1);
    }

    text = text.trimEnd();
    const lines = text.split('\n');
    const trimmedFirstLine = lines[0].trimStart();
    const margin = lines[0].length - trimmedFirstLine.length;

    return lines.map(l => l.slice(Math.max(0, margin)).trimEnd()).join('\n');
}

function wrapBuilder(builder, builderWrap) {
    for (const [key, wrap] of truthyEntries(builderWrap)) {
        if (key === 'adapt' || !isFunction(wrap)) {
            continue;
        }

        const original = builder[key];
        if (!isFunction(original)) {
            continue;
        }

        builder[key] = (...args) => wrap.apply(builder, [original.bind(builder), ...args]);
    }

    return builder;
}

/**
 * Wrap an existing adapter and adapt the behaviour of the builder
 */
function wrapAdapter(adapter, nameTemplate, builderWrap) {
    return {
        ...adapter,
        name: format(nameTemplate, adapter.name),
        async adapt(builder) {
            builderWrap.adapt?.apply(builder);
            await Promise.resolve(adapter.adapt(wrapBuilder(builder, builderWrap)));
        },
    };
}

const defaultOptions = {
    origin: undefined,
};

function buildSiteContents(builder, options, dest) {
    
    builder.prerendered.pages.forEach(page => {
        console.log(page);
    });
    return "";
}

const nameTemplate = '%s + contents';
function pageContentsWrapAdapter(adapter, options) {
    const resolvedOptions = { ...defaultOptions, ...options };

    return wrapAdapter(adapter, nameTemplate, {
        adapt() {
            resolvedOptions.origin = resolvedOptions.origin ?? this.config.kit.prerender.origin;
        },
        writePrerendered(original, dest) {
            // We call the original last, in case the prerendered
            // bundle contains a sitemap which should take priority
            return [...buildSiteContents(this, resolvedOptions, dest), ...original(dest)];
        },
    });
}

export default {
    isFunction,
    truthy,
    truthyEntries,
    trimMargin,
    wrapBuilder,
    wrapAdapter,
    buildSiteContents,
    pageContentsWrapAdapter,
};
